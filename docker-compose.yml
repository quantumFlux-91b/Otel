services:
  item-service:
    container_name: item-service
    build: ./
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - otel-collector
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JAVA_TOOL_OPTIONS: -javaagent:/opentelemetry-javaagent.jar
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_LOGS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_SERVICE_NAME: item-service
    networks:
      - monitoring
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    volumes:
      - ./docker/collector/otel-collector-config.yml:/etc/otelcol-contrib/otel-collector-config.yml
    command: [ "--config", "/etc/otelcol-contrib/otel-collector-config.yml" ]
    networks:
      - monitoring
    ports:
      - "4317"
    depends_on:
      - prometheus
      - loki
      - tempo
  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: opentelemetry
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
    networks:
      - monitoring
    ports:
      - "5432:5432"
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    command:
      - "--web.enable-otlp-receiver"
      - "--web.enable-remote-write-receiver"
      - "--config.file=/etc/prometheus/prometheus.yml"
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    volumes:
      - ./docker/loki/loki-config.yml:/etc/loki/local-config.yaml
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    ports:
      - "3200:3200"      # Tempo HTTP API (query)
      - "4317:4317"      # OTLP gRPC
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yml
    command: [ "-config.file=/etc/tempo.yml" ]
    networks:
      - monitoring
  grafana:
    container_name: grafana
    image: grafana/grafana-oss
    volumes:
      - ./docker/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    networks:
      - monitoring
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
networks:
  monitoring:
    driver: bridge
